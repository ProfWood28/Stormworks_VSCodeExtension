require("Utils.LBBase")
require("Utils.TableExtensions")
require("LifeBoatAPI.Math.Vec")
require("LifeBoatAPI.Entity.SWPlayer")
require("LifeBoatAPI.Entity.SWVehicle")
require("LifeBoatAPI.Entity.SWObject")

------------------------------------------------------------------------------------------------------------------------
---Represents an instance of a popup, displaying in-world to a specific player
---@class SWPopupBase : LBBaseClass
---@field position SWVec position this is displayed on screen, or in the world
---@field text string text to display in game
---@field visible boolean whether this popup displays or is hidden
---@field _instances table<LBPeer, SWPopupInstanceBase> lookup of popup-instances currently displaying to players
SWPopupBase = {
    position    = SWVec:zero();
    text        = "";
    visible     = true;
    _instances = {};
}
LBClass(SWPopupBase)

---@private
function SWPopupBase:_init(text, position, hidden)
    self.position = position
    self.visible = not hidden
    self.text = text
end

---Sets the text being displayed on this popup
---@overload fun(text:string)
---@param text string text to display in the popup
---@param skipRedraw boolean True to disable the automatic "update on change" behaviour
function SWPopupBase:updateText(text, skipRedraw)
    self:_updateVal("text", text, skipRedraw, false)
end

---Sets whether this popup displays in game or not
---@overload fun(visible:boolean)
---@param isVisible boolean whether this popup is visible in game or not
---@param skipRedraw boolean True to disable the automatic "update on change" behaviour
function SWPopupBase:updateVisible(isVisible, skipRedraw)
    self:_updateVal("visible", isVisible, skipRedraw, false)
end

---Sets the current popup position
---@overload fun(position:SWVec)
---@param position SWVec position to draw the popup
---@param skipRedraw boolean True to disable the automatic "update on change" behaviour
function SWScreenPopup:updatePosition(self, position, skipRedraw)
    self:_updateVal("position", position, skipRedraw)
end

---Show this popup to the specified player
---@overload fun(player:SWPlayer) : SWPopupInstanceBase
---@param peer LBPeer connected peer to show this popup to
---@param skipDraw boolean True to avoid drawing this to the player immediately
---@return SWPopupInstanceBase
function SWPopupBase:showTo(peer, skipDraw)
    if(not self._instances[peer]) then
        -- new instance needed for this peerID
        local instance = self:_createInstance(peer)
        self._instances[peer] = instance
        if(not skipDraw) then
            instance:redraw(true)
        end
    else
        -- redraw existing instance, in case player rejoined
        local instance = self._instances[peer]
        instance:redraw(true)
        return instance
    end
end

---Redraws all instances of this popup, currently showing to players
---@param shouldRespawn boolean True if we should destroy and recreate the UI, needed for certain types of update
function SWPopupBase:redraw(shouldRespawn)
    self._instances:foreach(function(_,v) v:redraw(shouldRespawn) end)
end

---Destroys all instances of this popup currently being displayed
function SWPopupBase:destroy()
    self._instances:foreach(function(_,v) v:remove() end)
    self._instances = {}
end

---Removes a specific instance, for example when players leave the server
---@param peer LBPeer player the instance was drawn for
function SWPopupBase:removeInstance(peer)
    if(self._instances[peer]) then
        self._instances[peer]:remove()
        self._instances[peer] = nil
    end
end

---Helper method to update the underlying popups if their data has changed
---@param key string property to update
---@param val any value to set
---@param skipRedraw boolean True if the redraw this causes, should be skipped and done manually
---@param shouldRespawn boolean True if the property being updated requires a full respawn on redraw
function SWPopupBase:_updateVal(key, val, skipRedraw, shouldRespawn)
    local previousValue = self[key]
    self[key] = val
    if(previousValue ~= val and not skipRedraw) then
        self:redraw(shouldRespawn)
    end
end

---Helper to create an instance of the SWPopupInstanceBase from inheriting classes
---Overwrite with implementation returning the relevant SWPopupInstanceBase type
---@type fun(self:SWPopupBase, player: SWPlayer) : SWPopupInstanceBase
SWPopupBase._createInstance = nil



------------------------------------------------------------------------------------------------------------------------
--- Represents an instance of a popup, displaying in-world to a specific player
--- @class SWPopupInstanceBase : LBBaseClass
--- @field uiID number Unique ID generated by SW, required to display
--- @field popup SWPopupBase popup "parent" this is an instance of (draws relating to the parent settings)
--- @field peer LBPeer player that this popup is being displayed to
SWPopupInstanceBase = {}
LBClass(SWPopupInstanceBase)

---@private
function SWPopupInstanceBase:_init(popup, peer)
    self.popup = popup
    self.peer = peer
    self:redraw(true)
end

---Destroys this popup, removing it from the players game
function SWPopupInstanceBase:remove()
    server.removePopup(self.peer.peerID, self.uiID)
end

---Redraws the popup instance
---@param respawn boolean True if the popup needs entirely cleared and respawned
function SWPopupInstanceBase:redraw(respawn)
end
